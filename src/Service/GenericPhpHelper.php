<?php

class GenericPhpHelper
{
    protected const UNEXPECTED_VALUE_EXCEPTION = 'UnexpectedValueException';
    protected const INVALID_ARGUMENT_EXCEPTION = 'InvalidArgumentException';
    protected const USE_EXCEPTIONS = [self::UNEXPECTED_VALUE_EXCEPTION, self::INVALID_ARGUMENT_EXCEPTION];

    protected function generateGenericPhpHeader(
        string $name,
        string $namespace,
        bool $isFinal = false,
        string $extends = null,
        array $implements = [],
        array $use = self::USE_EXCEPTIONS,
        string $type = 'class'
    ): string
    {
        $class_statement = $type . ' ' . ucfirst($name);
        $useStatement = '';

        if ($isFinal) {
            $class_statement = 'final ' . $class_statement;
        }

        if (!is_null($extends)) {
            //TODO: if you extend a value object both this class and the parent class implement the marker interface.
            $class_statement .= ' extends ' . $extends;
        }

        if (!empty($implements)) {
            $class_statement .= ' implements ' . implode(',', $implements);
        }

        foreach ($use as $className) {
            $useStatement .= <<<EOT

            use $className;
            EOT;

        }

        return <<<EOT
<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace $namespace;

$useStatement

$class_statement
{
EOT;
    }
}