<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Vog\ValueObjects;


use UnexpectedValueException;

final class Config implements ValueObject
{
    private GeneratorOptions $generatorOptions;
    private string $dateTimeFormat;

    public function __construct (
        GeneratorOptions $generatorOptions,
        string $dateTimeFormat
    ) {
        $this->generatorOptions = $generatorOptions;
        $this->dateTimeFormat = $dateTimeFormat;
    }
    
    public function getGeneratorOptions(): GeneratorOptions 
    {
        return $this->generatorOptions;
    }
    
    public function getDateTimeFormat(): string 
    {
        return $this->dateTimeFormat;
    }
    
    public function withGeneratorOptions(GeneratorOptions $generatorOptions): self 
    {
        return new self(
            $generatorOptions,
            $this->dateTimeFormat
        );
    }
    
    public function withDateTimeFormat(string $dateTimeFormat): self 
    {
        return new self(
            $this->generatorOptions,
            $dateTimeFormat
        );
    }
    
    public function toArray(): array
    {
        return [
            'generatorOptions' =>  $this->valueToArray($this->generatorOptions),
            'dateTimeFormat' => $this->dateTimeFormat,
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('generatorOptions', $array)) {
            throw new UnexpectedValueException('Array key generatorOptions does not exist');
        }
        
        if (is_string($array['generatorOptions']) && is_a(GeneratorOptions::class, Enum::class, true)) {
            $array['generatorOptions'] = GeneratorOptions::fromName($array['generatorOptions']);
        }
    
        if (is_array($array['generatorOptions']) && (is_a(GeneratorOptions::class, Set::class, true) || is_a(GeneratorOptions::class, ValueObject::class, true))) {
            $array['generatorOptions'] = GeneratorOptions::fromArray($array['generatorOptions']);
        }

        if (!array_key_exists('dateTimeFormat', $array)) {
            throw new UnexpectedValueException('Array key dateTimeFormat does not exist');
        }
        
        return new self(
            $array['generatorOptions'],
            $array['dateTimeFormat']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        return (string) $value;
    }    
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
}