<?php
/**
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Vog\ValueObjects;


use UnexpectedValueException;
use InvalidArgumentException;

class GenerateCommandOptions implements CommandOptions
{
    private ?string $workingDir;
    private ?string $configFile;

    public function __construct(
        ?string $workingDir,
        ?string $configFile
    )
    {
        $this->workingDir = $workingDir;
        $this->configFile = $configFile;
    }

    public function getWorkingDir(): ?string
    {
        return $this->workingDir;
    }

    public function getConfigFile(): ?string
    {
        return $this->configFile;
    }

    public function withWorkingDir(?string $workingDir): self
    {
        return new self(
            $workingDir,
            $this->configFile
        );
    }

    public function withConfigFile(?string $configFile): self
    {
        return new self(
            $this->workingDir,
            $configFile
        );
    }

    public function toArray(): array
    {
        return [
            'workingDir' => $this->workingDir,
            'configFile' => $this->configFile,
        ];
    }

    public static function fromArray(array $array): self
    {

        return new self(
            $array['workingDir'] ?? null,
            $array['configFile'] ?? null
        );
    }

    private function valueToArray($value)
    {
        if ($value === null){
            return null;
        }

        if (method_exists($value, 'toArray')) {
             return $value->toArray();
        }

        if (is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
              return $value->format('Y-m-d');
        }

        return (string) $value;
    }

    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();

        return ($ref === $val);
    }

}