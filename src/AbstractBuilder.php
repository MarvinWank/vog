<?php

namespace Vog;

abstract class AbstractBuilder
{
    protected string $type;
    protected string $name;
    protected array $config;
    protected string $namespace;
    protected string $target_filepath;
    protected array $values;

    protected ?string $extends;
    protected array $implements;
    protected bool $is_final;
    protected bool $is_mutable;

    public function __construct(string $name, array $config)
    {
        $this->name = $name;
        $this->config = $config;
        $this->extends = null;
        $this->is_final = true;
        $this->is_mutable = false;
    }

    abstract public function getPhpCode(): string;

    public static function camelize(string $string): string
    {
        return lcfirst(str_replace('_', '', ucwords($string, '_')));
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setTargetFilepath(string $target_filepath)
    {
        $this->target_filepath = $target_filepath;
    }

    public function getTargetFilepath(): string
    {
        return $this->target_filepath . DIRECTORY_SEPARATOR . ucfirst($this->name) . ".php";
    }

    public function getNamespace(): string
    {
        return $this->namespace;
    }

    public function setNamespace(string $namespace): void
    {
        $this->namespace = $namespace;
    }

    public function setValues(array $values)
    {
        if ($this->config['generatorOptions']['target'] === ConfigOptions::MODE_PSR2) {
            if ($this instanceof EnumBuilder) {
                $upper=[];
                foreach ($values as $key => $value) {
                    $upper[strtoupper($key)] = $value;
                }
                $this->values = $upper;
                return;
            }

            $camlized=[];
            foreach ($values as $key => $value) {
                $camlized[self::camelize($key)] = $value;
            }

            $this->values = $camlized;
            return;
        }

        $this->values = $values;
    }

    public function getValues(): array
    {
        return $this->values;
    }

    public function getExtends(): string
    {
        return $this->extends;
    }

    public function setExtends(string $extends): void
    {
        $this->extends = $extends;
    }

    public function getImplements(): array
    {
        return $this->implements;
    }

    public function setImplements(array $implements): void
    {
        $this->implements = $implements;
    }

    public function isIsFinal(): bool
    {
        return $this->is_final;
    }

    public function setIsFinal(bool $is_final): void
    {
        $this->is_final = $is_final;
    }

    public function isMutable(): bool
    {
        return $this->is_mutable;
    }

    public function setIsMutable(bool $is_mutable): void
    {
        $this->is_mutable = $is_mutable;
    }

    protected function closeClass($phpcode) {
        $phpcode .= <<<EOT

}
EOT;
        return $phpcode;
    }

    protected function generateGenericPhpHeader(): string
    {
        $class_statement = "class " . ucfirst($this->name);
        if ($this->is_final){
            $class_statement = "final " . $class_statement;
        }

        if (!is_null($this->extends)){
            $class_statement .= " extends $this->extends";
        }

        if (!empty($this->implements)){
            $class_statement .= " implements ";
            foreach ($this->implements as $index => $interface){
                if ($index < count($this->implements) - 1){
                    $class_statement .= "$interface, ";
                }
                else {
                    $class_statement .= "$interface";
                }
            }
        }

        $header = <<<EOT
<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace $this->namespace;

use UnexpectedValueException;
use InvalidArgumentException;

$class_statement
{
EOT;
        return $header;
    }
}