<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Vog\ValueObjects;


use UnexpectedValueException;

class VogDefinitionFile implements ValueObject
{
    private string $root_path;
    private string $namespace;
    private VogDefinitionSet $FilePathGroup;

    public function __construct (
        string $root_path,
        string $namespace,
        VogDefinitionSet $FilePathGroup
    ) {
        $this->root_path = $root_path;
        $this->namespace = $namespace;
        $this->FilePathGroup = $FilePathGroup;
    }
    
    public function root_path(): string 
    {
        return $this->root_path;
    }
    
    public function namespace(): string 
    {
        return $this->namespace;
    }
    
    public function FilePathGroup(): VogDefinitionSet 
    {
        return $this->FilePathGroup;
    }
    
    public function with_root_path(string $root_path): self 
    {
        return new self(
            $root_path,
            $this->namespace,
            $this->FilePathGroup
        );
    }
    
    public function with_namespace(string $namespace): self 
    {
        return new self(
            $this->root_path,
            $namespace,
            $this->FilePathGroup
        );
    }
    
    public function with_FilePathGroup(VogDefinitionSet $FilePathGroup): self 
    {
        return new self(
            $this->root_path,
            $this->namespace,
            $FilePathGroup
        );
    }
    
    public function toArray(): array
    {
        return [
            'root_path' => $this->root_path,
            'namespace' => $this->namespace,
            'FilePathGroup' =>  $this->valueToArray($this->FilePathGroup),
        ];
    }
    
    public static function fromArray(array $array): self
    {        
        if (!array_key_exists('root_path', $array)) {
            throw new UnexpectedValueException('Array key root_path does not exist');
        }
                
        if (!array_key_exists('namespace', $array)) {
            throw new UnexpectedValueException('Array key namespace does not exist');
        }
                
        if (!array_key_exists('FilePathGroup', $array)) {
            throw new UnexpectedValueException('Array key FilePathGroup does not exist');
        }
        
        if (isset($array['FilePathGroup']) && is_string($array['FilePathGroup']) && is_a(VogDefinitionSet::class, Enum::class, true)) {
            $array['FilePathGroup'] = VogDefinitionSet::fromName($array['FilePathGroup']);
        }
    
        if (isset($array['FilePathGroup']) && is_array($array['FilePathGroup']) && (is_a(VogDefinitionSet::class, Set::class, true) || is_a(VogDefinitionSet::class, ValueObject::class, true))) {
            $array['FilePathGroup'] = VogDefinitionSet::fromArray($array['FilePathGroup']);
        }

        return new self(
            $array['root_path'] ?? null,
            $array['namespace'] ?? null,
            $array['FilePathGroup'] ?? null
        );
    }
        
    private function valueToArray($value)
    {
        if($value === null){
            return null;
        }
    
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        if(is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
            return $value->format('Y-m-d');
        }
        
        return (string) $value;
    }
        
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
    
}