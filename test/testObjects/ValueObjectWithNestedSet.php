<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Test\TestObjects;


use UnexpectedValueException;

final class ValueObjectWithNestedSet implements ValueObject
{
    private string $title;
    private RecipeSet $recipes;

    public function __construct (
        string $title,
        RecipeSet $recipes
    ) {
        $this->title = $title;
        $this->recipes = $recipes;
    }
    
    public function getTitle(): string 
    {
        return $this->title;
    }
    
    public function getRecipes(): RecipeSet 
    {
        return $this->recipes;
    }
    
    public function withTitle(string $title): self 
    {
        return new self(
            $title,
            $this->recipes
        );
    }
    
    public function withRecipes(RecipeSet $recipes): self 
    {
        return new self(
            $this->title,
            $recipes
        );
    }
    
    public function toArray(): array
    {
        return [
            'title' => $this->title,
            'recipes' =>  $this->valueToArray($this->recipes),
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('title', $array)) {
            throw new UnexpectedValueException('Array key title does not exist');
        }
        
        if (!array_key_exists('recipes', $array)) {
            throw new UnexpectedValueException('Array key recipes does not exist');
        }
        
        if (is_string($array['recipes']) && is_a(RecipeSet::class, Enum::class, true)) {
            $array['recipes'] = RecipeSet::fromName($array['recipes']);
        }
    
        if (is_array($array['recipes']) && (is_a(RecipeSet::class, Set::class, true) || is_a(RecipeSet::class, ValueObject::class, true))) {
            $array['recipes'] = RecipeSet::fromArray($array['recipes']);
        }

        return new self(
            $array['title'],
            $array['recipes']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        return (string) $value;
    }    
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
}