<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Test\TestObjects;


use UnexpectedValueException;

final class WithUnderscore implements ValueObject
{
    private string $noCamelCase;

    public function __construct (
        string $noCamelCase
    ) {
        $this->noCamelCase = $noCamelCase;
    }
    
    public function getNoCamelCase(): string 
    {
        return $this->noCamelCase;
    }
    
    public function withNoCamelCase(string $noCamelCase): self 
    {
        return new self(
            $noCamelCase
        );
    }
    
    public function toArray(): array
    {
        return [
            'noCamelCase' => $this->noCamelCase,
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('noCamelCase', $array)) {
            throw new UnexpectedValueException('Array key noCamelCase does not exist');
        }
        
        return new self(
            $array['noCamelCase']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        if(is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
            return $value->format('Y-m-d');
        }
        
        return (string) $value;
    }
        
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
    
}