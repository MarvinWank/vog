<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Test\TestObjectsFpp;


use UnexpectedValueException;

final class WithUnderscore implements ValueObject
{
    private string $no_camel_case;

    public function __construct (
        string $no_camel_case
    ) {
        $this->no_camel_case = $no_camel_case;
    }
    
    public function no_camel_case(): string 
    {
        return $this->no_camel_case;
    }
    
    public function with_no_camel_case(string $no_camel_case): self 
    {
        return new self(
            $no_camel_case
        );
    }
    
    public function toArray(): array
    {
        return [
            'no_camel_case' => $this->no_camel_case,
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('no_camel_case', $array)) {
            throw new UnexpectedValueException('Array key no_camel_case does not exist');
        }
        
        return new self(
            $array['no_camel_case']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        if(is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
            return $value->format('Y-m-d');
        }
        
        return (string) $value;
    }
        
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
    
}