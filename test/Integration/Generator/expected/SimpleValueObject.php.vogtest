<?php
/**
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Vog\Test\TestObjects\App\DTOs;


use UnexpectedValueException;
use InvalidArgumentException;

class TestClass
{
    private string $title;
    private int $amount;
    private bool $active;

    public function __construct(
        string $title,
        int $amount,
        bool $active
    )
    {
        $this->title = $title;
        $this->amount = $amount;
        $this->active = $active;
    }

    public function getTitle(): string
    {
        return $this->title;
    }

    public function getAmount(): int
    {
        return $this->amount;
    }

    public function getActive(): bool
    {
        return $this->active;
    }

    public function withTitle(string $title): self
    {
        return new self(
            $title,
            $this->amount,
            $this->active
        );
    }

    public function withAmount(int $amount): self
    {
        return new self(
            $this->title,
            $amount,
            $this->active
        );
    }

    public function withActive(bool $active): self
    {
        return new self(
            $this->title,
            $this->amount,
            $active
        );
    }

    public function toArray(): array
    {
        return [
            'title' => $this->title,
            'amount' => $this->amount,
            'active' => $this->active,
        ];
    }

    public static function fromArray(array $array): self
    {
        if (!array_key_exists('title', $array)) {
            throw new UnexpectedValueException('Array key title does not exist');
        }
        if (!array_key_exists('amount', $array)) {
            throw new UnexpectedValueException('Array key amount does not exist');
        }
        if (!array_key_exists('active', $array)) {
            throw new UnexpectedValueException('Array key active does not exist');
        }

        return new self(
            $array['title'] ?? null,
            $array['amount'] ?? null,
            $array['active'] ?? null
        );
    }

    private function valueToArray($value)
    {
        if ($value === null){
            return null;
        }

        if (method_exists($value, 'toArray')) {
             return $value->toArray();
        }

        if (is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
              return $value->format('Y-m-d');
        }

        return (string) $value;
    }

    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();

        return ($ref === $val);
    }

}